/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

#include "contiki.h"
#include "node-id.h"
#include "lib/random.h"
#include "sys/ctimer.h"
#include "net/ip/uip.h"
#include "net/ipv6/uip-ds6.h"
#include "net/ip/uip-udp-packet.h"
#include "contiki-lib.h"
#include "contiki-net.h"
#ifdef WITH_COMPOWER
#include "powertrace.h"
#endif
#include "contiki-lib.h"
#include "contiki-net.h"
#include "dev/serial-line.h"
#include <stdio.h>
#include <string.h>
#include "net/rpl/rpl.h"
#include "simstats.h"

#define UDP_CLIENT_PORT 8765
#define UDP_SERVER_PORT 5678

#define UDP_EXAMPLE_ID  190

#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"

#ifndef PERIOD
#define PERIOD 480
#endif

//#define START_INTERVAL		(15 * CLOCK_SECOND)
#define SEND_INTERVAL		(PERIOD * CLOCK_SECOND)
#define SEND_TIME		(random_rand() % SEND_INTERVAL)
#define MAX_PAYLOAD_LEN		127

static struct uip_udp_conn *client_conn;
static uip_ipaddr_t server_ipaddr;

static uint16_t total_pkts;
static unsigned int transmited_packets=0;
static unsigned int app_bytes;
static unsigned int app_bytesl2=0;

/*---------------------------------------------------------------------------*/
PROCESS(udp_client_process, "UDP client process");
AUTOSTART_PROCESSES(&udp_client_process);
/*---------------------------------------------------------------------------*/
static void
tcpip_handler(void)
{
	//char *str;

	if(uip_newdata()) {
		/*str = uip_appdata;
    str[uip_datalen()] = '\0';
    printf("DATA recv '%s'\n", str);*/
	}
}
/*---------------------------------------------------------------------------*/
static void
send_packet(void *ptr)
{
	static int seq_id;
	//char buf[MAX_PAYLOAD_LEN];
	struct {
		uint8_t seqno;
	} msg;

	seq_id++;
	total_pkts++;
	if(seq_id == 256) {
		/* Wrap to 128 to identify restarts */
		seq_id = 128;
	}
	msg.seqno = seq_id;
	/*PRINTF("DATA send to %d 'Hello %d'\n",
         server_ipaddr.u8[sizeof(server_ipaddr.u8) - 1], seq_id);*/
	//sprintf(buf, "%d from the client", seq_id);
	uip_udp_packet_sendto(client_conn, &msg, sizeof(msg),
			&server_ipaddr, UIP_HTONS(UDP_SERVER_PORT));

	printf("Out;%u;%u\n",seq_id,total_pkts);
	transmited_packets++;
	static unsigned int temp;
